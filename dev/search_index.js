var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = NaNStatistics","category":"page"},{"location":"#NaNStatistics","page":"Home","title":"NaNStatistics","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [NaNStatistics]","category":"page"},{"location":"#NaNStatistics.histcounts!-Tuple{Array, AbstractArray, AbstractRange}","page":"Home","title":"NaNStatistics.histcounts!","text":"histcounts!(N, x, xedges::AbstractRange; T=Int64)\n\nAs histcounts, but in-place, returning counts in the Array N\n\n\n\n\n\n","category":"method"},{"location":"#NaNStatistics.histcounts-Tuple{AbstractArray, AbstractRange}","page":"Home","title":"NaNStatistics.histcounts","text":"histcounts(x::AbstractArray, xedges::AbstractRange; T=Int64)\n\nIgnoring NaNs, calculate the number of x values that fall into each of length(xedges)-1 equally spaced bins along the x axis with bin edges specified by xedges.\n\nBy default, the counts are returned as Int64s, though this can be changed by specifying an output type with the optional keyword argument T.\n\n\n\n\n\n","category":"method"},{"location":"#NaNStatistics.inpctile-Tuple{Any, Any}","page":"Home","title":"NaNStatistics.inpctile","text":"inpctile(A, p::Number; dims)\n\nReturn a boolean array that identifies which values of the iterable collection A fall within the central pth percentile, optionally along a dimension specified by dims.\n\nA valid percentile value must satisfy 0 <= p <= 100.\n\n\n\n\n\n","category":"method"},{"location":"#NaNStatistics.movmean-Tuple{AbstractVector{T} where T, Number}","page":"Home","title":"NaNStatistics.movmean","text":"movmean(x::AbstractVecOrMat, n::Number)\n\nSimple moving average of x in 1 or 2 dimensions, spanning n bins (or n*n in 2D), returning an array of the same size as x. For the resulting moving average to be symmetric, n must be an odd integer; if n is not an odd integer, the first odd integer greater than n will be used instead.\n\n\n\n\n\n","category":"method"},{"location":"#NaNStatistics.nanaad-Tuple{Any}","page":"Home","title":"NaNStatistics.nanaad","text":"nanaad(A; dims)\n\nMean (average) absolute deviation from the mean, ignoring NaNs, of an indexable collection A, optionally along a dimension specified by dims. Note that for a Normal distribution, sigma = 1.253 * AAD\n\n\n\n\n\n","category":"method"},{"location":"#NaNStatistics.nanadd!-Tuple{Array, AbstractArray}","page":"Home","title":"NaNStatistics.nanadd!","text":"nanadd!(A, B)\n\nAdd the non-NaN elements of B to A, treating NaNs as zeros\n\n\n\n\n\n","category":"method"},{"location":"#NaNStatistics.nanadd-Tuple{Any, Any}","page":"Home","title":"NaNStatistics.nanadd","text":"nanadd(A, B)\n\nAdd the non-NaN elements of A and B, treating NaNs as zeros\n\n\n\n\n\n","category":"method"},{"location":"#NaNStatistics.nanbinmean!-Tuple{AbstractMatrix{T} where T, AbstractMatrix{T} where T, AbstractVector{T} where T, AbstractVector{T} where T, AbstractVector{T} where T, AbstractRange, AbstractRange}","page":"Home","title":"NaNStatistics.nanbinmean!","text":"nanbinmean!(MU, N, x, y, z, xedges::AbstractRange, yedges::AbstractRange)\n\nIgnoring NaNs, fill the matrix MU with the means and N with the counts of non-NAN z values that fall into a 2D grid of x and y bins defined by xedges and yedges. The independent variables x and y, as well as the dependent variable z, are all expected as 1D vectors (any subtype of AbstractVector).\n\nThe output matrices MU and N must be the same size, and must each have length(yedges)-1 rows and length(xedges)-1 columns.\n\n\n\n\n\n","category":"method"},{"location":"#NaNStatistics.nanbinmean!-Tuple{AbstractVecOrMat{T} where T, AbstractVector{T} where T, AbstractVecOrMat{T} where T, AbstractRange}","page":"Home","title":"NaNStatistics.nanbinmean!","text":"nanbinmean!(MU, [N], x, y, xedges::AbstractRange)\n\nIgnoring NaNs, fill the array MU with the means (and optionally N with the counts) of non-NAN y values that fall into each of length(xedges)-1 equally spaced bins along the x axis with bin edges specified by xedges.\n\nThe array of x data should given as a one-dimensional array (any subtype of AbstractVector) and y as either a 1-d or 2-d array (any subtype of AbstractVecOrMat).\n\nThe output arrays MU and N must be the same size, and must have the same number of columns as y; if y is a 2-d array (matrix), then each column of y will be treated as a separate variable.\n\n\n\n\n\n","category":"method"},{"location":"#NaNStatistics.nanbinmean-Tuple{AbstractVector{T} where T, AbstractVecOrMat{T} where T, AbstractRange}","page":"Home","title":"NaNStatistics.nanbinmean","text":"nanbinmean(x, y, xedges::AbstractRange)\n\nIgnoring NaNs, calculate the mean of y values that fall into each of length(xedges)-1 equally spaced bins along the x axis with bin edges specified by xedges.\n\nThe array of x data should be given as a one-dimensional array (any subtype of AbstractVector) and y as either a 1-d or 2-d array (any subtype of AbstractVecOrMat). If y is a 2-d array, then each column of y will be treated as a separate variable.\n\n\n\n\n\n","category":"method"},{"location":"#NaNStatistics.nanbinmean-Tuple{AbstractVector{T} where T, AbstractVector{T} where T, AbstractVector{T} where T, AbstractRange, AbstractRange}","page":"Home","title":"NaNStatistics.nanbinmean","text":"nanbinmean(x, y, z, xedges, yedges)\n\nIgnoring NaNs, calculate the mean of z values that fall into a 2D grid of x and y bins with bin edges defined by xedges and yedges. The independent variables x and y, as well as the dependent variable z, are all expected as 1D vectors (any subtype of AbstractVector).\n\n\n\n\n\n","category":"method"},{"location":"#NaNStatistics.nanbinmedian!-Tuple{AbstractVector{T} where T, AbstractVector{T} where T, AbstractVector{T} where T, AbstractRange}","page":"Home","title":"NaNStatistics.nanbinmedian!","text":"nanbinmedian!(M, [N], x, y, xedges::AbstractRange)\n\nFill the array M with the medians (and optionally N with the counts) of non-NaN y values that fall into each of length(xedges)-1 equally spaced bins along the x axis with bin edges specified by xedges.\n\nIf y is a 2-d array (matrix), each column will be treated as a separate variable\n\n\n\n\n\n","category":"method"},{"location":"#NaNStatistics.nanbinmedian-Tuple{AbstractVector{T} where T, AbstractVecOrMat{T} where T, AbstractRange}","page":"Home","title":"NaNStatistics.nanbinmedian","text":"nanbinmedian(x, y, xedges::AbstractRange)\n\nCalculate the median, ignoring NaNs, of y values that fall into each of length(xedges)-1 equally spaced bins along the x axis with bin edges specified by xedges.\n\nIf y is a 2-d array (matrix), each column will be treated as a separate variable\n\n\n\n\n\n","category":"method"},{"location":"#NaNStatistics.nanbinwmean-Tuple{AbstractVector{T} where T, AbstractVecOrMat{T} where T, AbstractVector{T} where T, AbstractRange}","page":"Home","title":"NaNStatistics.nanbinwmean","text":"nanbinwmean(x, y, xedges::AbstractRange)\n\nIgnoring NaNs, calculate the weighted mean of y values that fall into each of length(xedges)-1 equally spaced bins along the x axis with bin edges specified by xedges.\n\nThe array of x data should given as a one-dimensional array (any subtype of AbstractVector) and y as either a 1-d or 2-d array (any subtype of AbstractVecOrMat). If y is a 2-d array, then each column of y will be treated as a separate variable.\n\n\n\n\n\n","category":"method"},{"location":"#NaNStatistics.nanextrema-Tuple{Any}","page":"Home","title":"NaNStatistics.nanextrema","text":"nanextrema(A; dims)\n\nFind the extrema (maximum & minimum) of an indexable collection A, ignoring NaNs, optionally along a dimension specified by dims.\n\n\n\n\n\n","category":"method"},{"location":"#NaNStatistics.nanmad-Tuple{Any}","page":"Home","title":"NaNStatistics.nanmad","text":"nanmad(A; dims)\n\nMedian absolute deviation from the median, ignoring NaNs, of an indexable collection A, optionally along a dimension specified by dims. Note that for a Normal distribution, sigma = 1.4826 * MAD\n\n\n\n\n\n","category":"method"},{"location":"#NaNStatistics.nanmask!-Tuple{Any, Any}","page":"Home","title":"NaNStatistics.nanmask!","text":"nanmask!(mask, A)\n\nFill a Boolean mask of dimensions size(A) that is false wherever A is NaN\n\n\n\n\n\n","category":"method"},{"location":"#NaNStatistics.nanmask-Tuple{Any}","page":"Home","title":"NaNStatistics.nanmask","text":"nanmask(A)\n\nCreate a Boolean mask of dimensions size(A) that is false wherever A is NaN\n\n\n\n\n\n","category":"method"},{"location":"#NaNStatistics.nanmax-Tuple{Any, Any}","page":"Home","title":"NaNStatistics.nanmax","text":"nanmax(a,b)\n\nAs max(a,b), but if either argument is NaN, return the other one\n\n\n\n\n\n","category":"method"},{"location":"#NaNStatistics.nanmaximum-Tuple{Any}","page":"Home","title":"NaNStatistics.nanmaximum","text":"nanmaximum(A; dims)\n\nFind the largest non-NaN value of an indexable collection A, optionally along a dimension specified by dims.\n\n\n\n\n\n","category":"method"},{"location":"#NaNStatistics.nanmean-Tuple{Any}","page":"Home","title":"NaNStatistics.nanmean","text":"nanmean(A, [W]; dims)\n\nIgnoring NaNs, calculate the mean (optionally weighted) of an indexable collection A, optionally along dimensions specified by dims.\n\n\n\n\n\n","category":"method"},{"location":"#NaNStatistics.nanmedian-Tuple{Any}","page":"Home","title":"NaNStatistics.nanmedian","text":"nanmedian(A; dims)\n\nCalculate the median, ignoring NaNs, of an indexable collection A, optionally along a dimension specified by dims.\n\n\n\n\n\n","category":"method"},{"location":"#NaNStatistics.nanmin-Tuple{Any, Any}","page":"Home","title":"NaNStatistics.nanmin","text":"nanmin(a,b)\n\nAs min(a,b), but if either argument is NaN, return the other one\n\n\n\n\n\n","category":"method"},{"location":"#NaNStatistics.nanminimum-Tuple{Any}","page":"Home","title":"NaNStatistics.nanminimum","text":"nanminimum(A; dims)\n\nAs minimum but ignoring NaNs: Find the smallest non-NaN value of an indexable collection A, optionally along a dimension specified by dims.\n\n\n\n\n\n","category":"method"},{"location":"#NaNStatistics.nanpctile-Tuple{Any, Any}","page":"Home","title":"NaNStatistics.nanpctile","text":"nanpctile(A, p; dims)\n\nFind the pth percentile of an indexable collection A, ignoring NaNs, optionally along a dimension specified by dims.\n\nA valid percentile value must satisfy 0 <= p <= 100.\n\n\n\n\n\n","category":"method"},{"location":"#NaNStatistics.nanrange-Tuple{Any}","page":"Home","title":"NaNStatistics.nanrange","text":"nanrange(A; dims)\n\nCalculate the range (maximum - minimum) of an indexable collection A, ignoring NaNs, optionally along a dimension specified by dims.\n\n\n\n\n\n","category":"method"},{"location":"#NaNStatistics.nanstd-Tuple{Any}","page":"Home","title":"NaNStatistics.nanstd","text":"nanstd(A, [W]; dims)\n\nCalculate the standard deviation (optionaly weighted), ignoring NaNs, of an indexable collection A, optionally along a dimension specified by dims.\n\n\n\n\n\n","category":"method"},{"location":"#NaNStatistics.nansum-Tuple{Any}","page":"Home","title":"NaNStatistics.nansum","text":"nansum(A; dims)\n\nCalculate the sum of an indexable collection A, ignoring NaNs, optionally along dimensions specified by dims.\n\n\n\n\n\n","category":"method"},{"location":"#NaNStatistics.zeronan!-Tuple{Array}","page":"Home","title":"NaNStatistics.zeronan!","text":"zeronan!(A)\n\nReplace all NaNs in A with zeros of the same type\n\n\n\n\n\n","category":"method"}]
}
